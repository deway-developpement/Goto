# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @constraint(pattern: String) on FIELD_DEFINITION

type Tag {
  id: ID!
  name: String!
  createdAt: DateTime!
  hikes(
    """Specify to filter the records returned."""
    filter: HikeFilter = {}

    """Specify to sort results."""
    sorting: [HikeSort!] = []
  ): [Hike!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input HikeFilter {
  and: [HikeFilter!]
  or: [HikeFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  distance: NumberFieldComparison
  elevation: NumberFieldComparison
  difficulty: DifficultyFilterComparison
  duration: NumberFieldComparison
  latitude: NumberFieldComparison
  longitude: NumberFieldComparison
  createdAt: DateFieldComparison
  category: HikeFilterCategoryFilter
  performances: HikeFilterPerformanceFilter
  alerts: HikeFilterAlertFilter
  reviews: HikeFilterReviewFilter
  pointsOfInterest: HikeFilterPointOfInterestFilter
  tags: HikeFilterTagFilter
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input DifficultyFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: Difficulty
  neq: Difficulty
  gt: Difficulty
  gte: Difficulty
  lt: Difficulty
  lte: Difficulty
  like: Difficulty
  notLike: Difficulty
  iLike: Difficulty
  notILike: Difficulty
  in: [Difficulty!]
  notIn: [Difficulty!]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input HikeFilterCategoryFilter {
  and: [HikeFilterCategoryFilter!]
  or: [HikeFilterCategoryFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  createdAt: DateFieldComparison
}

input HikeFilterPerformanceFilter {
  and: [HikeFilterPerformanceFilter!]
  or: [HikeFilterPerformanceFilter!]
  id: IDFilterComparison
  date: DateFieldComparison
  distance: NumberFieldComparison
  elevation: NumberFieldComparison
  duration: NumberFieldComparison
  createdAt: DateFieldComparison
}

input HikeFilterAlertFilter {
  and: [HikeFilterAlertFilter!]
  or: [HikeFilterAlertFilter!]
  id: IDFilterComparison
  latitude: NumberFieldComparison
  longitude: NumberFieldComparison
  type: AlertTypeFilterComparison
  createdAt: DateFieldComparison
}

input AlertTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: AlertType
  neq: AlertType
  gt: AlertType
  gte: AlertType
  lt: AlertType
  lte: AlertType
  like: AlertType
  notLike: AlertType
  iLike: AlertType
  notILike: AlertType
  in: [AlertType!]
  notIn: [AlertType!]
}

enum AlertType {
  TRACK_CHANGE
  BLOCKED_PATH
  DANGER
  ANIMAL
  SLIPPERY_PATH
  DANGEROUS_ROAD
  FLOOD
}

input HikeFilterReviewFilter {
  and: [HikeFilterReviewFilter!]
  or: [HikeFilterReviewFilter!]
  id: IDFilterComparison
  rating: NumberFieldComparison
  createdAt: DateFieldComparison
}

input HikeFilterPointOfInterestFilter {
  and: [HikeFilterPointOfInterestFilter!]
  or: [HikeFilterPointOfInterestFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  latitude: NumberFieldComparison
  longitude: NumberFieldComparison
  createdAt: DateFieldComparison
}

input HikeFilterTagFilter {
  and: [HikeFilterTagFilter!]
  or: [HikeFilterTagFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  createdAt: DateFieldComparison
}

input HikeSort {
  field: HikeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum HikeSortFields {
  id
  name
  distance
  elevation
  difficulty
  duration
  latitude
  longitude
  createdAt
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Review {
  id: ID!
  rating: Float!
  createdAt: DateTime!
  user: User!
  hike: Hike!
}

type Alert {
  id: ID!
  latitude: Float!
  longitude: Float!
  type: AlertType!
  createdAt: DateTime!
  hike: Hike!
  author: User!
}

type Category {
  id: ID!
  name: String!
  createdAt: DateTime!
  hikes: Hike
  defaultPhoto: Photo
}

type Performance {
  id: ID!
  date: DateTime!
  distance: Float!
  elevation: Float!
  duration: Float!
  track: String!
  createdAt: DateTime!
  user: User!
  hike: Hike!
}

type Hike {
  id: ID!
  name: String!
  distance: Float!
  elevation: Float!
  description: String!
  difficulty: Difficulty!
  duration: Float
  track: String!
  latitude: Float!
  longitude: Float!
  createdAt: DateTime!
  reviewsAggregate(
    """Filter to find records to aggregate on"""
    filter: ReviewAggregateFilter
  ): [HikeReviewsAggregateResponse!]!
  alertsAggregate(
    """Filter to find records to aggregate on"""
    filter: AlertAggregateFilter
  ): [HikeAlertsAggregateResponse!]!
  owner: User!
  category: Category
  tags(
    """Specify to filter the records returned."""
    filter: TagFilter = {}

    """Specify to sort results."""
    sorting: [TagSort!] = []
  ): [Tag!]
  photos(
    """Specify to filter the records returned."""
    filter: PhotoFilter = {}

    """Specify to sort results."""
    sorting: [PhotoSort!] = []
  ): [Photo!]
  pointsOfInterests(
    """Specify to filter the records returned."""
    filter: PointOfInterestFilter = {}

    """Specify to sort results."""
    sorting: [PointOfInterestSort!] = []
  ): [PointOfInterest!]
  reviews(
    """Specify to filter the records returned."""
    filter: ReviewFilter = {}

    """Specify to sort results."""
    sorting: [ReviewSort!] = []
  ): [Review!]
  alerts(
    """Specify to filter the records returned."""
    filter: AlertFilter = {}

    """Specify to sort results."""
    sorting: [AlertSort!] = []
  ): [Alert!]
  performances(
    """Specify to filter the records returned."""
    filter: PerformanceFilter = {}

    """Specify to sort results."""
    sorting: [PerformanceSort!] = []
  ): [Performance!]
  distanceFrom(lat: Float!, lon: Float!): Float!
  isLiked: Boolean!
}

input ReviewAggregateFilter {
  and: [ReviewAggregateFilter!]
  or: [ReviewAggregateFilter!]
  id: IDFilterComparison
  rating: NumberFieldComparison
  createdAt: DateFieldComparison
}

input AlertAggregateFilter {
  and: [AlertAggregateFilter!]
  or: [AlertAggregateFilter!]
  id: IDFilterComparison
  latitude: NumberFieldComparison
  longitude: NumberFieldComparison
  type: AlertTypeFilterComparison
  createdAt: DateFieldComparison
}

input TagFilter {
  and: [TagFilter!]
  or: [TagFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  createdAt: DateFieldComparison
}

input TagSort {
  field: TagSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TagSortFields {
  id
  name
  createdAt
}

input PhotoFilter {
  and: [PhotoFilter!]
  or: [PhotoFilter!]
  id: IDFilterComparison
  filename: StringFieldComparison
  createdAt: DateFieldComparison
}

input PhotoSort {
  field: PhotoSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PhotoSortFields {
  id
  filename
  createdAt
}

input PointOfInterestFilter {
  and: [PointOfInterestFilter!]
  or: [PointOfInterestFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  latitude: NumberFieldComparison
  longitude: NumberFieldComparison
  createdAt: DateFieldComparison
  hikes: PointOfInterestFilterHikeFilter
}

input PointOfInterestFilterHikeFilter {
  and: [PointOfInterestFilterHikeFilter!]
  or: [PointOfInterestFilterHikeFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  distance: NumberFieldComparison
  elevation: NumberFieldComparison
  difficulty: DifficultyFilterComparison
  duration: NumberFieldComparison
  latitude: NumberFieldComparison
  longitude: NumberFieldComparison
  createdAt: DateFieldComparison
}

input PointOfInterestSort {
  field: PointOfInterestSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PointOfInterestSortFields {
  id
  name
  latitude
  longitude
  createdAt
}

input ReviewFilter {
  and: [ReviewFilter!]
  or: [ReviewFilter!]
  id: IDFilterComparison
  rating: NumberFieldComparison
  createdAt: DateFieldComparison
  hike: ReviewFilterHikeFilter
  user: ReviewFilterUserFilter
}

input ReviewFilterHikeFilter {
  and: [ReviewFilterHikeFilter!]
  or: [ReviewFilterHikeFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  distance: NumberFieldComparison
  elevation: NumberFieldComparison
  difficulty: DifficultyFilterComparison
  duration: NumberFieldComparison
  latitude: NumberFieldComparison
  longitude: NumberFieldComparison
  createdAt: DateFieldComparison
}

input ReviewFilterUserFilter {
  and: [ReviewFilterUserFilter!]
  or: [ReviewFilterUserFilter!]
  id: IDFilterComparison
  pseudo: StringFieldComparison
  email: StringFieldComparison
  password: StringFieldComparison
  publicKey: StringFieldComparison
  credidential: NumberFieldComparison
  public: BooleanFieldComparison
  createdAt: DateFieldComparison
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input ReviewSort {
  field: ReviewSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ReviewSortFields {
  id
  rating
  createdAt
}

input AlertFilter {
  and: [AlertFilter!]
  or: [AlertFilter!]
  id: IDFilterComparison
  latitude: NumberFieldComparison
  longitude: NumberFieldComparison
  type: AlertTypeFilterComparison
  createdAt: DateFieldComparison
  author: AlertFilterUserFilter
  hike: AlertFilterHikeFilter
}

input AlertFilterUserFilter {
  and: [AlertFilterUserFilter!]
  or: [AlertFilterUserFilter!]
  id: IDFilterComparison
  pseudo: StringFieldComparison
  email: StringFieldComparison
  password: StringFieldComparison
  publicKey: StringFieldComparison
  credidential: NumberFieldComparison
  public: BooleanFieldComparison
  createdAt: DateFieldComparison
}

input AlertFilterHikeFilter {
  and: [AlertFilterHikeFilter!]
  or: [AlertFilterHikeFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  distance: NumberFieldComparison
  elevation: NumberFieldComparison
  difficulty: DifficultyFilterComparison
  duration: NumberFieldComparison
  latitude: NumberFieldComparison
  longitude: NumberFieldComparison
  createdAt: DateFieldComparison
}

input AlertSort {
  field: AlertSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AlertSortFields {
  id
  latitude
  longitude
  type
  createdAt
}

input PerformanceFilter {
  and: [PerformanceFilter!]
  or: [PerformanceFilter!]
  id: IDFilterComparison
  date: DateFieldComparison
  distance: NumberFieldComparison
  elevation: NumberFieldComparison
  duration: NumberFieldComparison
  createdAt: DateFieldComparison
  hike: PerformanceFilterHikeFilter
  user: PerformanceFilterUserFilter
}

input PerformanceFilterHikeFilter {
  and: [PerformanceFilterHikeFilter!]
  or: [PerformanceFilterHikeFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  distance: NumberFieldComparison
  elevation: NumberFieldComparison
  difficulty: DifficultyFilterComparison
  duration: NumberFieldComparison
  latitude: NumberFieldComparison
  longitude: NumberFieldComparison
  createdAt: DateFieldComparison
}

input PerformanceFilterUserFilter {
  and: [PerformanceFilterUserFilter!]
  or: [PerformanceFilterUserFilter!]
  id: IDFilterComparison
  pseudo: StringFieldComparison
  email: StringFieldComparison
  password: StringFieldComparison
  publicKey: StringFieldComparison
  credidential: NumberFieldComparison
  public: BooleanFieldComparison
  createdAt: DateFieldComparison
}

input PerformanceSort {
  field: PerformanceSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PerformanceSortFields {
  id
  date
  distance
  elevation
  duration
  createdAt
}

type PointOfInterest {
  id: ID!
  name: String!
  description: String!
  latitude: Float!
  longitude: Float!
  url: String
  createdAt: DateTime!
  photo: Photo
  hikes(
    """Specify to filter the records returned."""
    filter: HikeFilter = {}

    """Specify to sort results."""
    sorting: [HikeSort!] = []
  ): [Hike!]!
}

type Photo {
  id: ID!
  filename: String!
  createdAt: DateTime!
}

type Table {
  id: ID!
  name: String!
  createdAt: DateTime!
  owner: User
  hikes(
    """Specify to filter the records returned."""
    filter: HikeFilter = {}

    """Specify to sort results."""
    sorting: [HikeSort!] = []
  ): [Hike!]
}

type User {
  id: ID!
  pseudo: String!
  email: String!
  password: String!
  publicKey: String!
  credidential: Float!
  public: Boolean!
  createdAt: DateTime!
  friendsAggregate(
    """Filter to find records to aggregate on"""
    filter: UserAggregateFilter
  ): [UserFriendsAggregateResponse!]!
  performancesAggregate(
    """Filter to find records to aggregate on"""
    filter: PerformanceAggregateFilter
  ): [UserPerformancesAggregateResponse!]!
  reviewsAggregate(
    """Filter to find records to aggregate on"""
    filter: ReviewAggregateFilter
  ): [UserReviewsAggregateResponse!]!
  likesAggregate(
    """Filter to find records to aggregate on"""
    filter: HikeAggregateFilter
  ): [UserLikesAggregateResponse!]!
  tablesAggregate(
    """Filter to find records to aggregate on"""
    filter: TableAggregateFilter
  ): [UserTablesAggregateResponse!]!
  avatar: Photo
  friends(
    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): [User!]!
  performances(
    """Specify to filter the records returned."""
    filter: PerformanceFilter = {}

    """Specify to sort results."""
    sorting: [PerformanceSort!] = []
  ): [Performance!]!
  reviews(
    """Specify to filter the records returned."""
    filter: ReviewFilter = {}

    """Specify to sort results."""
    sorting: [ReviewSort!] = []
  ): [Review!]!
  likes(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: HikeFilter = {}

    """Specify to sort results."""
    sorting: [HikeSort!] = []
  ): UserLikesConnection!
  tables(
    """Specify to filter the records returned."""
    filter: TableFilter = {}

    """Specify to sort results."""
    sorting: [TableSort!] = []
  ): [Table!]!
  isFriend: Boolean!
}

input UserAggregateFilter {
  and: [UserAggregateFilter!]
  or: [UserAggregateFilter!]
  id: IDFilterComparison
  pseudo: StringFieldComparison
  email: StringFieldComparison
  password: StringFieldComparison
  publicKey: StringFieldComparison
  credidential: NumberFieldComparison
  public: BooleanFieldComparison
  createdAt: DateFieldComparison
}

input PerformanceAggregateFilter {
  and: [PerformanceAggregateFilter!]
  or: [PerformanceAggregateFilter!]
  id: IDFilterComparison
  date: DateFieldComparison
  distance: NumberFieldComparison
  elevation: NumberFieldComparison
  duration: NumberFieldComparison
  createdAt: DateFieldComparison
}

input HikeAggregateFilter {
  and: [HikeAggregateFilter!]
  or: [HikeAggregateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  distance: NumberFieldComparison
  elevation: NumberFieldComparison
  difficulty: DifficultyFilterComparison
  duration: NumberFieldComparison
  latitude: NumberFieldComparison
  longitude: NumberFieldComparison
  createdAt: DateFieldComparison
}

input TableAggregateFilter {
  and: [TableAggregateFilter!]
  or: [TableAggregateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  createdAt: DateFieldComparison
}

input UserFilter {
  and: [UserFilter!]
  or: [UserFilter!]
  id: IDFilterComparison
  pseudo: StringFieldComparison
  email: StringFieldComparison
  password: StringFieldComparison
  publicKey: StringFieldComparison
  credidential: NumberFieldComparison
  public: BooleanFieldComparison
  createdAt: DateFieldComparison
}

input UserSort {
  field: UserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserSortFields {
  id
  pseudo
  email
  password
  publicKey
  credidential
  public
  createdAt
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input TableFilter {
  and: [TableFilter!]
  or: [TableFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  createdAt: DateFieldComparison
}

input TableSort {
  field: TableSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TableSortFields {
  id
  name
  createdAt
}

type UserEdge {
  """The node containing the User"""
  node: User!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type UserConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [UserEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserAggregateGroupBy {
  id: ID
  pseudo: String
  email: String
  password: String
  publicKey: String
  credidential: Float
  public: Boolean
  createdAt: DateTime
}

type UserCountAggregate {
  id: Int
  pseudo: Int
  email: Int
  password: Int
  publicKey: Int
  credidential: Int
  public: Int
  createdAt: Int
}

type UserSumAggregate {
  credidential: Float
}

type UserAvgAggregate {
  credidential: Float
}

type UserMinAggregate {
  id: ID
  pseudo: String
  email: String
  password: String
  publicKey: String
  credidential: Float
  createdAt: DateTime
}

type UserMaxAggregate {
  id: ID
  pseudo: String
  email: String
  password: String
  publicKey: String
  credidential: Float
  createdAt: DateTime
}

type UserAggregateResponse {
  groupBy: UserAggregateGroupBy
  count: UserCountAggregate
  sum: UserSumAggregate
  avg: UserAvgAggregate
  min: UserMinAggregate
  max: UserMaxAggregate
}

type HikeEdge {
  """The node containing the Hike"""
  node: Hike!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type UserLikesConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [HikeEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserTablesAggregateGroupBy {
  id: ID
  name: String
  createdAt: DateTime
}

type UserTablesCountAggregate {
  id: Int
  name: Int
  createdAt: Int
}

type UserTablesMinAggregate {
  id: ID
  name: String
  createdAt: DateTime
}

type UserTablesMaxAggregate {
  id: ID
  name: String
  createdAt: DateTime
}

type UserTablesAggregateResponse {
  groupBy: UserTablesAggregateGroupBy
  count: UserTablesCountAggregate
  min: UserTablesMinAggregate
  max: UserTablesMaxAggregate
}

type UserLikesAggregateGroupBy {
  id: ID
  name: String
  distance: Float
  elevation: Float
  difficulty: Difficulty
  duration: Float
  latitude: Float
  longitude: Float
  createdAt: DateTime
}

type UserLikesCountAggregate {
  id: Int
  name: Int
  distance: Int
  elevation: Int
  difficulty: Int
  duration: Int
  latitude: Int
  longitude: Int
  createdAt: Int
}

type UserLikesSumAggregate {
  distance: Float
  elevation: Float
  duration: Float
  latitude: Float
  longitude: Float
}

type UserLikesAvgAggregate {
  distance: Float
  elevation: Float
  duration: Float
  latitude: Float
  longitude: Float
}

type UserLikesMinAggregate {
  id: ID
  name: String
  distance: Float
  elevation: Float
  difficulty: Difficulty
  duration: Float
  latitude: Float
  longitude: Float
  createdAt: DateTime
}

type UserLikesMaxAggregate {
  id: ID
  name: String
  distance: Float
  elevation: Float
  difficulty: Difficulty
  duration: Float
  latitude: Float
  longitude: Float
  createdAt: DateTime
}

type UserLikesAggregateResponse {
  groupBy: UserLikesAggregateGroupBy
  count: UserLikesCountAggregate
  sum: UserLikesSumAggregate
  avg: UserLikesAvgAggregate
  min: UserLikesMinAggregate
  max: UserLikesMaxAggregate
}

type UserReviewsAggregateGroupBy {
  id: ID
  rating: Float
  createdAt: DateTime
}

type UserReviewsCountAggregate {
  id: Int
  rating: Int
  createdAt: Int
}

type UserReviewsSumAggregate {
  rating: Float
}

type UserReviewsAvgAggregate {
  rating: Float
}

type UserReviewsMinAggregate {
  id: ID
  rating: Float
  createdAt: DateTime
}

type UserReviewsMaxAggregate {
  id: ID
  rating: Float
  createdAt: DateTime
}

type UserReviewsAggregateResponse {
  groupBy: UserReviewsAggregateGroupBy
  count: UserReviewsCountAggregate
  sum: UserReviewsSumAggregate
  avg: UserReviewsAvgAggregate
  min: UserReviewsMinAggregate
  max: UserReviewsMaxAggregate
}

type UserPerformancesAggregateGroupBy {
  id: ID
  date: DateTime
  distance: Float
  elevation: Float
  duration: Float
  createdAt: DateTime
}

type UserPerformancesCountAggregate {
  id: Int
  date: Int
  distance: Int
  elevation: Int
  duration: Int
  createdAt: Int
}

type UserPerformancesSumAggregate {
  distance: Float
  elevation: Float
  duration: Float
}

type UserPerformancesAvgAggregate {
  distance: Float
  elevation: Float
  duration: Float
}

type UserPerformancesMinAggregate {
  id: ID
  date: DateTime
  distance: Float
  elevation: Float
  duration: Float
  createdAt: DateTime
}

type UserPerformancesMaxAggregate {
  id: ID
  date: DateTime
  distance: Float
  elevation: Float
  duration: Float
  createdAt: DateTime
}

type UserPerformancesAggregateResponse {
  groupBy: UserPerformancesAggregateGroupBy
  count: UserPerformancesCountAggregate
  sum: UserPerformancesSumAggregate
  avg: UserPerformancesAvgAggregate
  min: UserPerformancesMinAggregate
  max: UserPerformancesMaxAggregate
}

type UserFriendsAggregateGroupBy {
  id: ID
  pseudo: String
  email: String
  password: String
  publicKey: String
  credidential: Float
  public: Boolean
  createdAt: DateTime
}

type UserFriendsCountAggregate {
  id: Int
  pseudo: Int
  email: Int
  password: Int
  publicKey: Int
  credidential: Int
  public: Int
  createdAt: Int
}

type UserFriendsSumAggregate {
  credidential: Float
}

type UserFriendsAvgAggregate {
  credidential: Float
}

type UserFriendsMinAggregate {
  id: ID
  pseudo: String
  email: String
  password: String
  publicKey: String
  credidential: Float
  createdAt: DateTime
}

type UserFriendsMaxAggregate {
  id: ID
  pseudo: String
  email: String
  password: String
  publicKey: String
  credidential: Float
  createdAt: DateTime
}

type UserFriendsAggregateResponse {
  groupBy: UserFriendsAggregateGroupBy
  count: UserFriendsCountAggregate
  sum: UserFriendsSumAggregate
  avg: UserFriendsAvgAggregate
  min: UserFriendsMinAggregate
  max: UserFriendsMaxAggregate
}

type CustomPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type CustomHikeConnection {
  pageInfo: CustomPageInfo!
  edges: [CustomHikeEdge!]!
  totalCount: Float!
}

type CustomHikeEdge {
  cursor: String!
  node: Hike!
}

type HikeConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [HikeEdge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type HikeAggregateGroupBy {
  id: ID
  name: String
  distance: Float
  elevation: Float
  difficulty: Difficulty
  duration: Float
  latitude: Float
  longitude: Float
  createdAt: DateTime
}

type HikeCountAggregate {
  id: Int
  name: Int
  distance: Int
  elevation: Int
  difficulty: Int
  duration: Int
  latitude: Int
  longitude: Int
  createdAt: Int
}

type HikeSumAggregate {
  distance: Float
  elevation: Float
  duration: Float
  latitude: Float
  longitude: Float
}

type HikeAvgAggregate {
  distance: Float
  elevation: Float
  duration: Float
  latitude: Float
  longitude: Float
}

type HikeMinAggregate {
  id: ID
  name: String
  distance: Float
  elevation: Float
  difficulty: Difficulty
  duration: Float
  latitude: Float
  longitude: Float
  createdAt: DateTime
}

type HikeMaxAggregate {
  id: ID
  name: String
  distance: Float
  elevation: Float
  difficulty: Difficulty
  duration: Float
  latitude: Float
  longitude: Float
  createdAt: DateTime
}

type HikeAggregateResponse {
  groupBy: HikeAggregateGroupBy
  count: HikeCountAggregate
  sum: HikeSumAggregate
  avg: HikeAvgAggregate
  min: HikeMinAggregate
  max: HikeMaxAggregate
}

type HikeAlertsAggregateGroupBy {
  id: ID
  latitude: Float
  longitude: Float
  type: AlertType
  createdAt: DateTime
}

type HikeAlertsCountAggregate {
  id: Int
  latitude: Int
  longitude: Int
  type: Int
  createdAt: Int
}

type HikeAlertsSumAggregate {
  latitude: Float
  longitude: Float
  type: Float
}

type HikeAlertsAvgAggregate {
  latitude: Float
  longitude: Float
  type: Float
}

type HikeAlertsMinAggregate {
  id: ID
  latitude: Float
  longitude: Float
  type: AlertType
  createdAt: DateTime
}

type HikeAlertsMaxAggregate {
  id: ID
  latitude: Float
  longitude: Float
  type: AlertType
  createdAt: DateTime
}

type HikeAlertsAggregateResponse {
  groupBy: HikeAlertsAggregateGroupBy
  count: HikeAlertsCountAggregate
  sum: HikeAlertsSumAggregate
  avg: HikeAlertsAvgAggregate
  min: HikeAlertsMinAggregate
  max: HikeAlertsMaxAggregate
}

type HikeReviewsAggregateGroupBy {
  id: ID
  rating: Float
  createdAt: DateTime
}

type HikeReviewsCountAggregate {
  id: Int
  rating: Int
  createdAt: Int
}

type HikeReviewsSumAggregate {
  rating: Float
}

type HikeReviewsAvgAggregate {
  rating: Float
}

type HikeReviewsMinAggregate {
  id: ID
  rating: Float
  createdAt: DateTime
}

type HikeReviewsMaxAggregate {
  id: ID
  rating: Float
  createdAt: DateTime
}

type HikeReviewsAggregateResponse {
  groupBy: HikeReviewsAggregateGroupBy
  count: HikeReviewsCountAggregate
  sum: HikeReviewsSumAggregate
  avg: HikeReviewsAvgAggregate
  min: HikeReviewsMinAggregate
  max: HikeReviewsMaxAggregate
}

type TagAggregateGroupBy {
  id: ID
  name: String
  createdAt: DateTime
}

type TagCountAggregate {
  id: Int
  name: Int
  createdAt: Int
}

type TagMinAggregate {
  id: ID
  name: String
  createdAt: DateTime
}

type TagMaxAggregate {
  id: ID
  name: String
  createdAt: DateTime
}

type CategoryAggregateGroupBy {
  id: ID
  name: String
  createdAt: DateTime
}

type CategoryCountAggregate {
  id: Int
  name: Int
  createdAt: Int
}

type CategoryMinAggregate {
  id: ID
  name: String
  createdAt: DateTime
}

type CategoryMaxAggregate {
  id: ID
  name: String
  createdAt: DateTime
}

type PointOfInterestAggregateGroupBy {
  id: ID
  name: String
  latitude: Float
  longitude: Float
  createdAt: DateTime
}

type PointOfInterestCountAggregate {
  id: Int
  name: Int
  latitude: Int
  longitude: Int
  createdAt: Int
}

type PointOfInterestSumAggregate {
  latitude: Float
  longitude: Float
}

type PointOfInterestAvgAggregate {
  latitude: Float
  longitude: Float
}

type PointOfInterestMinAggregate {
  id: ID
  name: String
  latitude: Float
  longitude: Float
  createdAt: DateTime
}

type PointOfInterestMaxAggregate {
  id: ID
  name: String
  latitude: Float
  longitude: Float
  createdAt: DateTime
}

type PerformanceAggregateGroupBy {
  id: ID
  date: DateTime
  distance: Float
  elevation: Float
  duration: Float
  createdAt: DateTime
}

type PerformanceCountAggregate {
  id: Int
  date: Int
  distance: Int
  elevation: Int
  duration: Int
  createdAt: Int
}

type PerformanceSumAggregate {
  distance: Float
  elevation: Float
  duration: Float
}

type PerformanceAvgAggregate {
  distance: Float
  elevation: Float
  duration: Float
}

type PerformanceMinAggregate {
  id: ID
  date: DateTime
  distance: Float
  elevation: Float
  duration: Float
  createdAt: DateTime
}

type PerformanceMaxAggregate {
  id: ID
  date: DateTime
  distance: Float
  elevation: Float
  duration: Float
  createdAt: DateTime
}

type PerformanceAggregateResponse {
  groupBy: PerformanceAggregateGroupBy
  count: PerformanceCountAggregate
  sum: PerformanceSumAggregate
  avg: PerformanceAvgAggregate
  min: PerformanceMinAggregate
  max: PerformanceMaxAggregate
}

type ReviewAggregateGroupBy {
  id: ID
  rating: Float
  createdAt: DateTime
}

type ReviewCountAggregate {
  id: Int
  rating: Int
  createdAt: Int
}

type ReviewSumAggregate {
  rating: Float
}

type ReviewAvgAggregate {
  rating: Float
}

type ReviewMinAggregate {
  id: ID
  rating: Float
  createdAt: DateTime
}

type ReviewMaxAggregate {
  id: ID
  rating: Float
  createdAt: DateTime
}

type ReviewAggregateResponse {
  groupBy: ReviewAggregateGroupBy
  count: ReviewCountAggregate
  sum: ReviewSumAggregate
  avg: ReviewAvgAggregate
  min: ReviewMinAggregate
  max: ReviewMaxAggregate
}

type AlertAggregateGroupBy {
  id: ID
  latitude: Float
  longitude: Float
  type: AlertType
  createdAt: DateTime
}

type AlertCountAggregate {
  id: Int
  latitude: Int
  longitude: Int
  type: Int
  createdAt: Int
}

type AlertSumAggregate {
  latitude: Float
  longitude: Float
  type: Float
}

type AlertAvgAggregate {
  latitude: Float
  longitude: Float
  type: Float
}

type AlertMinAggregate {
  id: ID
  latitude: Float
  longitude: Float
  type: AlertType
  createdAt: DateTime
}

type AlertMaxAggregate {
  id: ID
  latitude: Float
  longitude: Float
  type: AlertType
  createdAt: DateTime
}

type TableAggregateGroupBy {
  id: ID
  name: String
  createdAt: DateTime
}

type TableCountAggregate {
  id: Int
  name: Int
  createdAt: Int
}

type TableMinAggregate {
  id: ID
  name: String
  createdAt: DateTime
}

type TableMaxAggregate {
  id: ID
  name: String
  createdAt: DateTime
}

type Query {
  userAggregate(
    """Filter to find records to aggregate on"""
    filter: UserAggregateFilter
  ): [UserAggregateResponse!]!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
  exist(email: String!): Boolean!
  whoami: User!
  hikeAggregate(
    """Filter to find records to aggregate on"""
    filter: HikeAggregateFilter
  ): [HikeAggregateResponse!]!
  hike(
    """The id of the record to find."""
    id: ID!
  ): Hike
  hikes(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: HikeFilter = {}

    """Specify to sort results."""
    sorting: [HikeSort!] = []
  ): HikeConnection!
  getHikeAround(
    lat: Float!
    lon: Float!

    """Distance in kilometers"""
    distance: Float = 50
    search: String
    difficulty: String
    limit: Int!
    cursor: String = ""
  ): CustomHikeConnection!
  getHikePopular(search: String, difficulty: String, limit: Int!, cursor: String = ""): CustomHikeConnection!
  getHikeAlreadyDone(search: String, difficulty: String, limit: Int!, cursor: String = ""): CustomHikeConnection!
  tag(
    """The id of the record to find."""
    id: ID!
  ): Tag
  tags(
    """Specify to filter the records returned."""
    filter: TagFilter = {}

    """Specify to sort results."""
    sorting: [TagSort!] = []
  ): [Tag!]!
  category(
    """The id of the record to find."""
    id: ID!
  ): Category
  categories(
    """Specify to filter the records returned."""
    filter: CategoryFilter = {}

    """Specify to sort results."""
    sorting: [CategorySort!] = []
  ): [Category!]!
  pointOfInterest(
    """The id of the record to find."""
    id: ID!
  ): PointOfInterest
  pointOfInterests(
    """Specify to filter the records returned."""
    filter: PointOfInterestFilter = {}

    """Specify to sort results."""
    sorting: [PointOfInterestSort!] = []
  ): [PointOfInterest!]!
  performanceAggregate(
    """Filter to find records to aggregate on"""
    filter: PerformanceAggregateFilter
  ): [PerformanceAggregateResponse!]!
  performance(
    """The id of the record to find."""
    id: ID!
  ): Performance
  performances(
    """Specify to filter the records returned."""
    filter: PerformanceFilter = {}

    """Specify to sort results."""
    sorting: [PerformanceSort!] = []
  ): [Performance!]!
  reviewAggregate(
    """Filter to find records to aggregate on"""
    filter: ReviewAggregateFilter
  ): [ReviewAggregateResponse!]!
  review(
    """The id of the record to find."""
    id: ID!
  ): Review
  reviews(
    """Specify to filter the records returned."""
    filter: ReviewFilter = {}

    """Specify to sort results."""
    sorting: [ReviewSort!] = []
  ): [Review!]!
  alert(
    """The id of the record to find."""
    id: ID!
  ): Alert
  alerts(
    """Specify to filter the records returned."""
    filter: AlertFilter = {}

    """Specify to sort results."""
    sorting: [AlertSort!] = []
  ): [Alert!]!
  table(
    """The id of the record to find."""
    id: ID!
  ): Table
  tables(
    """Specify to filter the records returned."""
    filter: TableFilter = {}

    """Specify to sort results."""
    sorting: [TableSort!] = []
  ): [Table!]!
}

input CategoryFilter {
  and: [CategoryFilter!]
  or: [CategoryFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  createdAt: DateFieldComparison
}

input CategorySort {
  field: CategorySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CategorySortFields {
  id
  name
  createdAt
}

type Mutation {
  createUser(input: UserInput!): User!
  updateUser(id: String!, input: UserUpdateInput!): User!
  addFriend(id: String!): User!
  removeFriend(id: String!): User!
  deleteAccount: User!
  createHike(input: HikeInput!): Hike!
  addTagToHike(hikeId: String!, tagId: String!): Hike!
  removeTagFromHike(hikeId: String!, tagId: String!): Hike!
  deleteHike(id: String!): Hike!
  likeHike(id: String!): Hike!
  unlikeHike(id: String!): Hike!
  createTag(input: TagInput!): Tag!
  deleteTag(id: String!): Tag!
  createCategory(input: CategoryInput!): Category!
  deleteCategory(id: String!): Category!
  createPointOfInterest(input: PointOfInterestInput!): PointOfInterest!
  deletePointOfInterest(id: String!): PointOfInterest!
  createPerformance(input: PerformanceInput!): Performance!
  deletePerformance(id: String!): Performance!
  addReview(input: ReviewInput!): Review!
  updateReview(id: String!, input: ReviewInput!): Review!
  deleteReview(id: String!): Review!
  postAlert(input: AlertInput!): Alert!
  deleteAlert(id: String!): Alert!
  createPhoto(input: PhotoInput!): Photo!
  changeAvatar(input: PhotoInput!): Photo!
  createTable(input: TableInput!): Table!
  deleteTable(id: String!): Table!
  addHikeToTable(tableId: String!, hikeId: String!): Table!
}

input UserInput {
  """Pseudo of the user"""
  pseudo: String!

  """E-mail of the user"""
  email: String!

  """Password of the user"""
  password: String!
}

input UserUpdateInput {
  """Pseudo of the user"""
  pseudo: String

  """E-mail of the user"""
  email: String

  """Password of the user"""
  password: String
}

input HikeInput {
  name: String!
  description: String!
  difficulty: Difficulty!
  track: Upload!
  latitude: Float!
  longitude: Float!
  tagsId: [String!]!
  categoryId: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input TagInput {
  name: String!
}

input CategoryInput {
  name: String!
}

input PointOfInterestInput {
  name: String!
  description: String!
  latitude: Float!
  longitude: Float!
  url: String
}

input PerformanceInput {
  date: DateTime!
  duration: Float!
  distance: Float!
  elevation: Float!
  file: Upload!
  hikeId: String!
}

input ReviewInput {
  rating: Float!
  hikeId: String!
}

input AlertInput {
  latitude: Float!
  longitude: Float!
  type: AlertType!
  hikeId: String!
}

input PhotoInput {
  objId: String!
  objType: ObjType!
  file: Upload!
}

enum ObjType {
  HIKE
  USER
  CATEGORY
  POINTOFINTEREST
}

input TableInput {
  name: String!
}
