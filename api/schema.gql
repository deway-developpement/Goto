# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @constraint(pattern: String) on FIELD_DEFINITION

type User {
  _id: ID!

  """Pseudo of the user"""
  pseudo: String!

  """E-mail of the user"""
  email: String!

  """Password of the user"""
  password: String!

  """Public key of the user"""
  publicKey: String!

  """access of the user : bin rwrw"""
  credidential: Float!

  """List of friends of the user"""
  friends: [User!]!
  isConnected: Boolean!
}

type Hike {
  id: ID!
  name: String!
  distance: Float!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type HikeDeleteResponse {
  id: ID
  name: String
  distance: Float
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type HikeAggregateGroupBy {
  id: ID
  name: String
  distance: Float
}

type HikeCountAggregate {
  id: Int
  name: Int
  distance: Int
}

type HikeSumAggregate {
  distance: Float
}

type HikeAvgAggregate {
  distance: Float
}

type HikeMinAggregate {
  id: ID
  name: String
  distance: Float
}

type HikeMaxAggregate {
  id: ID
  name: String
  distance: Float
}

type HikeAggregateResponse {
  groupBy: HikeAggregateGroupBy
  count: HikeCountAggregate
  sum: HikeSumAggregate
  avg: HikeAvgAggregate
  min: HikeMinAggregate
  max: HikeMaxAggregate
}

type Message {
  _id: ID!

  """sender of the message"""
  sender: User!

  """Content of the message"""
  content: String!

  """Date of the message"""
  date: String!
}

type Query {
  User(id: String, email: String, input: SearchUserInput): User
  whoami: User
  exist(email: String!): Boolean!
  hikeAggregate(
    """Filter to find records to aggregate on"""
    filter: HikeAggregateFilter
  ): [HikeAggregateResponse!]!
  hike(
    """The id of the record to find."""
    id: ID!
  ): Hike
  hikes(
    """Specify to filter the records returned."""
    filter: HikeFilter = {}

    """Specify to sort results."""
    sorting: [HikeSort!] = []
  ): [Hike!]!
}

input SearchUserInput {
  """Pseudo of the user"""
  pseudo: String!

  """Public key of the user"""
  publicKey: String!
}

input HikeAggregateFilter {
  and: [HikeAggregateFilter!]
  or: [HikeAggregateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  distance: NumberFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input HikeFilter {
  and: [HikeFilter!]
  or: [HikeFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  distance: NumberFieldComparison
}

input HikeSort {
  field: HikeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum HikeSortFields {
  id
  name
  distance
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  createUser(input: UserInput!): User!
  newUser(input: NewUserInput!): User!
  deleteUser(id: String!): User
  updateUser(id: String!, input: UpdateUserInput!): User
}

input UserInput {
  """Pseudo of the user"""
  pseudo: String!

  """E-mail of the user"""
  email: String!

  """Password of the user"""
  password: String!

  """Public key of the user"""
  publicKey: String!

  """access of the user : bin rwrw"""
  credidential: Float!
}

input NewUserInput {
  """Pseudo of the user"""
  pseudo: String!

  """E-mail of the user"""
  email: String!

  """Password of the user"""
  password: String!
}

input UpdateUserInput {
  """E-mail of the user"""
  email: String

  """pseudo of the user"""
  pseudo: String

  """Password of the user"""
  password: String

  """Public key of the user"""
  publicKey: String

  """access of the user : bin rwrw"""
  credidential: Float
}

type Subscription {
  createdHike(input: CreateHikeSubscriptionFilterInput): Hike!
  updatedOneHike(input: UpdateOneHikeSubscriptionFilterInput): Hike!
  updatedManyHikes: UpdateManyResponse!
  deletedOneHike(input: DeleteOneHikeSubscriptionFilterInput): HikeDeleteResponse!
  deletedManyHikes: DeleteManyResponse!
}

input CreateHikeSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: HikeSubscriptionFilter!
}

input HikeSubscriptionFilter {
  and: [HikeSubscriptionFilter!]
  or: [HikeSubscriptionFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  distance: NumberFieldComparison
}

input UpdateOneHikeSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: HikeSubscriptionFilter!
}

input DeleteOneHikeSubscriptionFilterInput {
  """Specify to filter the records returned."""
  filter: HikeSubscriptionFilter!
}
